import { createStore } from 'vuex';\nimport { User, AuthResponse } from '@travel-booking/shared-lib';\nimport { ApiService } from '@travel-booking/shared-lib';\n\nexport interface AuthState {\n  isAuthenticated: boolean;\n  user: User | null;\n  token: string | null;\n  loading: boolean;\n  error: string | null;\n}\n\nconst apiService = new ApiService('https://api.travelbooking.example');\n\nexport default createStore({\n  state: {\n    isAuthenticated: false,\n    user: null,\n    token: null,\n    loading: false,\n    error: null\n  } as AuthState,\n  \n  getters: {\n    isAuthenticated: (state) => state.isAuthenticated,\n    currentUser: (state) => state.user,\n    isAdmin: (state) => state.user?.role === 'admin',\n    authError: (state) => state.error,\n    isLoading: (state) => state.loading\n  },\n  \n  mutations: {\n    setAuthenticated(state, isAuthenticated: boolean) {\n      state.isAuthenticated = isAuthenticated;\n    },\n    setUser(state, user: User | null) {\n      state.user = user;\n    },\n    setToken(state, token: string | null) {\n      state.token = token;\n      if (token) {\n        localStorage.setItem('auth_token', token);\n      } else {\n        localStorage.removeItem('auth_token');\n      }\n    },\n    setLoading(state, loading: boolean) {\n      state.loading = loading;\n    },\n    setError(state, error: string | null) {\n      state.error = error;\n    }\n  },\n  \n  actions: {\n    async login({ commit }, { email, password }: { email: string, password: string }) {\n      commit('setLoading', true);\n      commit('setError', null);\n      \n      try {\n        const response = await apiService.post<AuthResponse>('auth/login', { email, password });\n        \n        commit('setAuthenticated', true);\n        commit('setUser', response.user);\n        commit('setToken', response.token);\n        return response;\n      } catch (error) {\n        commit('setAuthenticated', false);\n        commit('setUser', null);\n        commit('setToken', null);\n        commit('setError', 'Failed to login. Please check your credentials.');\n        throw error;\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    \n    async register({ commit }, userData: { email: string, password: string, firstName: string, lastName: string }) {\n      commit('setLoading', true);\n      commit('setError', null);\n      \n      try {\n        const response = await apiService.post<AuthResponse>('auth/register', userData);\n        \n        commit('setAuthenticated', true);\n        commit('setUser', response.user);\n        commit('setToken', response.token);\n        return response;\n      } catch (error) {\n        commit('setAuthenticated', false);\n        commit('setUser', null);\n        commit('setToken', null);\n        commit('setError', 'Failed to register. Please try again.');\n        throw error;\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    \n    logout({ commit }) {\n      commit('setAuthenticated', false);\n      commit('setUser', null);\n      commit('setToken', null);\n      commit('setError', null);\n    },\n    \n    checkAuth({ commit }) {\n      const token = localStorage.getItem('auth_token');\n      \n      if (token) {\n        // In a real application, you would validate the token with the server\n        // and get the user information\n        commit('setToken', token);\n        commit('setAuthenticated', true);\n        // For now, we'll just set a mock user\n        commit('setUser', {\n          id: '1',\n          email: 'user@example.com',\n          firstName: 'Test',\n          lastName: 'User',\n          role: 'user'\n        });\n      } else {\n        commit('setAuthenticated', false);\n        commit('setUser', null);\n        commit('setToken', null);\n      }\n    }\n  },\n  \n  modules: {\n  }\n});